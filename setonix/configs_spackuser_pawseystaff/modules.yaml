modules:

  default:
    roots:
      lmod: /software/setonix/2022.01/modules

    lmod:
      projections:
        # modules on magnus have one of [apps, tools, python, devel] as start of module name 
        # an then {name}/{version}'
        # will be necessary to think of how to include variants 
        # that does not require manual updates. Fortunately, not many packages 
        # need this update 
        # adding /module.lua to enforce explicit usage of versions
        # Also, by default all packages are hidden modules 
        # unless explicitly added here 


        # hpc applications
        amber: 'applications/{name}/{version}/module.lua'
        cpmd: 'applications/{name}/{version}/module.lua'
        cp2k: 'applications/{name}/{version}/module.lua'
        gromacs: 'applications/{name}/{version}/module.lua'
        lammps: 'applications/{name}/{version}/module.lua'
        namd: 'applications/{name}/{version}/module.lua'
        nektar: 'applications/{name}/{version}/module.lua'
        nwchem: 'applications/{name}/{version}/module.lua'
        openfoam: 'applications/{name}/{version}/module.lua'
        openfoam-org: 'applications/{name}/{version}/module.lua'
        quantum-espresso: 'applications/{name}/{version}/module.lua'
        vasp: 'applications/{name}/{version}/module.lua'
        # since wrf and roms are currently not installed 
        # no need to add an explicity module
        # However, it may be useful to add our own module 
        # that provides all the dependencies needed by 
        # these packages
        #roms: 'applications/{name}/{version}/module.lua'
        #wrf: 'applications/{name}/{version}/module.lua'

        # numerical or parallelisation libraries 
        "boost +python": 'libraries/{name}/{version}-python/module.lua'
        "boost ~python": 'libraries/{name}/{version}/module.lua'
        eigen: 'libraries/{name}/{version}/module.lua'
        fftw: 'libraries/{name}/{version}/module.lua'
        gsl: 'libraries/{name}/{version}/module.lua'
        hpx: 'libraries/{name}/{version}/module.lua'
        "kokkos +hpx": 'libraries/{name}/{version}-hpx/module.lua'
        "kokkos +openmp": 'libraries/{name}/{version}-openmp/module.lua'
        kokkos: 'libraries/{name}/{version}/module.lua'
        netlib-lapack: 'libraries/{name}/{version}/module.lua'
        openblas: 'libraries/{name}/{version}/module.lua'
        opencv: 'libraries/{name}/{version}/module.lua'
        plasma: 'libraries/{name}/{version}/module.lua'
        petsc: 'libraries/{name}/{version}/module.lua'
        plumed: 'libraries/{name}/{version}/module.lua'
        netlib-scalapack: 'libraries/{name}/{version}/module.lua'
        slate: 'libraries/{name}/{version}/module.lua'
        trilinos: 'libraries/{name}/{version}/module.lua'


        # IO libraries 
        # to account for all the hdf5 variants 
        # serial
        "hdf5 +cxx~mpi api=v112": libraries/{name}/{version}-api-v112/module.lua
        "hdf5 +cxx~mpi api=v110": libraries/{name}/{version}-api-v110/module.lua
        "hdf5 +cxx~mpi api=v18": libraries/{name}/{version}-api-v18/module.lua
        #parallel 
        "hdf5 ~cxx+mpi api=v112": libraries/{name}/{version}-parallel-api-v112/module.lua
        "hdf5 ~cxx+mpi api=v110": libraries/{name}/{version}-parallel-api-v110/module.lua
        "hdf5 ~cxx+mpi api=v18": libraries/{name}/{version}-parallel-api-v18/module.lua
        # and when api is default assume it is a dependency. 
        "hdf5 api=default +cxx~mpi": dependencies/.{name}/{version}/module.lua
        "hdf5 api=default ~cxx+mpi": dependencies/.{name}/{version}-parallel/module.lua
        # adios also has similar variants 
        "adios2 +hdf5 +python": 'libraries/{name}/{version}-hdf5/module.lua'
        "adios2 ~hdf5 +python": 'libraries/{name}/{version}/module.lua'
        netcdf-c: 'libraries/{name}/{version}/module.lua'
        netcdf-cxx: 'libraries/{name}/{version}/module.lua'
        netcdf-cxx4: 'libraries/{name}/{version}/module.lua'
        netcdf-fortran: 'libraries/{name}/{version}/module.lua'
        parallel-netcdf: 'libraries/{name}/{version}/module.lua'

        # programing languages 
        go: 'programming-languages/{name}/{version}/module.lua'
        julia: 'programming-languages/{name}/{version}/module.lua'
        openjdk: 'programming-languages/{name}/{version}/module.lua'
        python: 'programming-languages/{name}/{version}/module.lua'
        r: 'programming-languages/{name}/{version}/module.lua'
        perl: 'programming-languages/{name}/{version}/module.lua'
        ruby: 'programming-languages/{name}/{version}/module.lua'
        rust: 'programming-languages/{name}/{version}/module.lua'

        # utilities 
        autoconf: 'utilities/{name}/{version}/module.lua'
        automake: 'utilities/{name}/{version}/module.lua'
        cmake: 'utilities/{name}/{version}/module.lua'
        emacs: 'utilities/{name}/{version}/module.lua'
        ffmpeg: 'utilities/{name}/{version}/module.lua'
        gnuplot: 'utilities/{name}/{version}/module.lua'
        matlab: 'utilities/{name}/{version}/module.lua'
        nano: 'utilities/{name}/{version}/module.lua'
        nextflow: 'utilities/{name}/{version}/module.lua'
        parallel: 'utilities/{name}/{version}/module.lua'
        reframe: 'utilities/{name}/{version}/module.lua'
        singularity: 'utilities/{name}/{version}/module.lua'

        # visualisation
        igv: 'visualisation/{name}/{version}/module.lua'
        paraview: 'visualisation/{name}/{version}/module.lua'
        visit: 'visualisation/{name}/{version}/module.lua'
        vmd: 'visualisation/{name}/{version}/module.lua'
        
        # python
        py-cython: 'python-packages/{name}/{version}/module.lua'
        py-dask: 'python-packages/{name}/{version}/module.lua'
        py-h5netcdf: 'python-packages/{name}/{version}/module.lua'
        py-h5py: 'python-packages/{name}/{version}/module.lua'
        py-ipython: 'python-packages/{name}/{version}/module.lua'
        py-matplotlib: 'python-packages/{name}/{version}/module.lua'
        py-mpi4py: 'python-packages/{name}/{version}/module.lua'
        py-netcdf4: 'python-packages/{name}/{version}/module.lua'
        py-numba: 'python-packages/{name}/{version}/module.lua'
        py-numpy: 'python-packages/{name}/{version}/module.lua'
        py-pandas: 'python-packages/{name}/{version}/module.lua'
        py-plotly: 'python-packages/{name}/{version}/module.lua'
        py-scikit-learn: 'python-packages/{name}/{version}/module.lua'
        py-scipy: 'python-packages/{name}/{version}/module.lua'
        py-pip: 'python-packages/{name}/{version}/module.lua'
        py-setuptools: 'python-packages/{name}/{version}/module.lua'

        #bio 
        exabayes: 'bio-applications/{name}/{version}/module.lua'
        examl: 'bio-applications/{name}/{version}/module.lua'

        #astro 
        casacore: 'astro-applications/{name}/{version}/module.lua'
        cfitsio: 'astro-applications/{name}/{version}/module.lua'
        wcslib: 'astro-applications/{name}/{version}/module.lua'
        cppzmq: 'astro-applications/{name}/{version}/module.lua'
        libzmq: 'astro-applications/{name}/{version}/module.lua'
        apr: 'astro-applications/{name}/{version}/module.lua'
        apr-util: 'astro-applications/{name}/{version}/module.lua'
        cppunit: 'astro-applications/{name}/{version}/module.lua'
        log4cxx: 'astro-applications/{name}/{version}/module.lua'
        mcpp: 'astro-applications/{name}/{version}/module.lua'
        xerces-c: 'astro-applications/{name}/{version}/module.lua'
        subversion: 'astro-applications/{name}/{version}/module.lua'
        pgplot: 'astro-applications/{name}/{version}/module.lua'
        py-funcsigs: 'astro-applications/{name}/{version}/module.lua'
        py-pyfits: 'astro-applications/{name}/{version}/module.lua'
        py-astropy: 'astro-applications/{name}/{version}/module.lua'
        py-boto3: 'astro-applications/{name}/{version}/module.lua'
        py-healpy: 'astro-applications/{name}/{version}/module.lua'
        py-emcee: 'astro-applications/{name}/{version}/module.lua'
        
        # S3 clients 
        awscli: 'utilities/{name}/{version}/module.lua'
        rclone: 'utilities/{name}/{version}/module.lua'
        miniocli: 'utilities/{name}/{version}/module.lua'

        # by default all others are hidden
        # PJE: Marco had no hash for dependencies 
        # but just to be careful to avoid name conflicts
        # added hash
        all: 'dependencies/.{name}/{version}-{hash:7}/module.lua'

