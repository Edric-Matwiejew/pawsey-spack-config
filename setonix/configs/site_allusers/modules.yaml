modules:

  # ensure that environment paths are properly updated 
  # based on what is installed
  prefix_inspections:
    bin:
      - PATH
    lib:
      - LIBRARY_PATH
      - LD_LIBRARY_PATH
    lib64:
      - LIBRARY_PATH
      - LD_LIBRARY_PATH
    include:
      - CPATH
    '':
      - CMAKE_PREFIX_PATH

  default:
    enable::
      - lmod 
    roots:
      lmod: /software/$PAWSEY_PROJECT/$USER/setonix/modules
    lmod:
      # set the hierarchy. Typical start point is mpi 
      # however, since there will only be a single 
      # mpi we do not use this hierarchy
      # instead use compiler (name and version)
      hierarchy::
        - compiler

      # set the core compilers for lmod
      # these are placed in core 
      core_compilers::
        - gcc@7.5.0

      # remove hashes from module name, can lead to more conflicts 
      # this can be addressed in other ways
      hash_length: 0

      # for all packages
      all:
        # to be consistent with current module setup, 
        # add to environment a {name}_HOME which stores the prefix 
        # to the package
        environment:
          # question: shall we prepend `SPACK_` ?
          # PJE: Typically it is more useful to have 
          # {name}_HOME since configures and cmake 
          # often will make use of {name}_ROOT or {name}_HOME
          set:
            '{name}_HOME': '{prefix}'
          # for backwards compatibility we could implement
          # the following environment variable 
          # this may be required for installs on Topaz
          #set:
          #  'MAALI_{name}_HOME': '{prefix}'
        # autoload none by default: limits unnecessary module loading
        # good for majority of end users 
        autoload: none
    
      # select all packages that depend on python, or r, or java,
      # and set these modules to autoload their dependencies
      ^python:
        autoload: direct
      ^r:
        autoload: direct
      ^java:
        autoload: direct

      # for libraries make sure to load direct dependencies
      # this is useful for developer workflows

      # library APIs
      blas:
        autoload: direct
      lapack:
        autoload: direct
      scalapack:
        autoload: direct
      fftw-api:
        autoload: direct

      # parallel libraries
      boost:
        autoload: direct
      hpx:
        autoload: direct
      kokkos:
        autoload: direct

      # numerical libraries
      openblas:
        autoload: direct
      netlib-lapack:
        autoload: direct
      netlib-scalapack:
        autoload: direct
      eigen:
        autoload: direct
      fftw:
        autoload: direct
      gsl:
        autoload: direct
      blaspp:
        autoload: direct
      magma:
        autoload: direct
      plasma:
        autoload: direct
      slate:
        autoload: direct
      plumed:
        autoload: direct
      opencv:
        autoload: direct
      trilinos:
        autoload: direct
      petsc:
        autoload: direct

      # i/o libraries
      hdf5:
        autoload: direct
      adios2:
        autoload: direct
      netcdf-c:
        autoload: direct
      netcdf-cxx:
        autoload: direct
      netcdf-cxx4:
        autoload: direct
      netcdf-fortran:
        autoload: direct
      parallel-netcdf:
        autoload: direct


      projections:
        # keeping these simple for user-specific installations
        # name, version, hash to avoid conflicts, no categories
        # adding /module.lua to enforce explicit usage of versions
        all: '{name}/{version}-{hash:7}/module'
