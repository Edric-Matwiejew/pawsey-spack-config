modules:

  default:
    enable::
      - lmod 
    roots:
      lmod: $spack/share/spack/setonix/lmod/2021.12/
    lmod:
      # set the core compilers for lmod
      # these are placed in core 
      core_compilers:
        - gcc@7.5.0

      # set the hierarchy. Typical start point is mpi 
      # however, since there will only be a single 
      # mpi we do not use this hierarchy
      # instead use compiler (name and version)
      hierarchy::
        - compiler
      
      # remove hashes from module name, can lead to more conflicts 
      # this can be addressed in other ways
      hash_length: 0

      # prevent modules from being generated for any packages 
      # build with this blacklist
      # example below is for openmpi
      # blacklist: ['openmpi']
      # save those that are on the whitelist
      # example below if for fftw
      # whitelist: ['fftw'] 

      # for all packages
      all:
        # to be consistent with current module setup, 
        # add to environment a {name}_HOME which stores the prefix 
        # to the package
        environment:
          set:
            '{name}_HOME': '{prefix}'
          # for backwards compatibility we could implement
          # the following environment variable 
          set:
            'MAALI_{name}_HOME': '{prefix}'
    
      # select all packages that depend on python 
      # and set these modules to autoload their dependencies
      ^python:
        autoload: direct

      projections:
        # modules on magnus have one of [apps, tools, python, devel] as start of module name 
        # an then {name}/{version}'
        # will be necessary to think of how to include variants 
        # that does not require manual updates. Fortunately, not many packages 
        # need this update 

        all: '{name}/{version}'
     
        # example of module format 
        gromacs: 'apps/{name}/{version}'
        # here hdf5 has multiple builds so added variants to the module name
        hdf5: 'io-libs/{name}/{version}-config={variants}'
        # if there is differences in dependencies like there might be for adios
        # then consider adding the hash as well 
        adios2: 'io-libs/{name}/{version}-config={variants}-{hash:6}'
        # could also add compilation flags 
        gsl: 'math-libs/{name}/{version}-flags={compiler_flags}'

        # the above creates directories that categorise the package
        # that is provided without fully using categories
        # add particular packages here if they should reside in a particular
        # category or also need a different naming convention to {name}/{version}


